let self = {},
    exec = require('child_process').exec,
    warmup = require('./warmup.js'),
    tests = [],
    failedTests = [],
    completedTests = 0

let assert = func condition, testName ->
    failedTests.push(testName) if not condition
    checkTestResults() if ++completedTests === len(tests)

let arrays_equal = func arrOne, arrTwo ->
    if len(arrOne) !== len(arrTwo):
        ret false
    for i : arrOne:
        if isInst(arrOne[i], Array) and isInst(arrTwo[i], Array):
            ret arrays_equal(arrOne[i], arrTwo[i])
        if arrOne[i] !== arrTwo[i]:
            ret false
    ret true

let init_self = func ->
    self.changeExampleOne = [33.25, [ 1, 0, 1, 3.25 ]]
    self.stripQuotesExampleOne = ["a\"\"\'\"\"\"\"z", "az"]
    self.scrambleExampleOne = ["LMU Computer Science"]
    self.powersOfTwoExampleOne = [70, [1, 2, 4, 8, 16, 32, 64]]
    self.prefixesExampleOne = ["brendan eich", ["", "b", "br", "bre", "bren", "brend", "brenda", "brendan", "brendan ", "brendan e", "brendan ei", "brendan eic", "brendan eich"]]
    self.interleaveExampleOne = [["a", "b"], [1, 2, true, null], ["a", 1, "b", 2, true, null]]
    self.stutterExampleOne = [[5,'dog',[3],9], [5,5,'dog','dog',[3],[3],9,9]]
    self.lineCmd = "node lines.js SmallerExample.txt"
    self.wordCmd = "node wordcount.js < story"
    self.wordEx1 = "a 2\nag 1\nan 1\nand 2\nfound 1\nint 1\nlong 3\nstring 1\nthey'd 1\n"
init_self()

let addTest = func test -> tests.push(test)
    
let test_change = func ->
    init_self()
    let result = warmup.change(self.changeExampleOne[0])
    assert(arrays_equal(result,self.changeExampleOne[1]), "change")
addTest(test_change)

let test_stripQuotes = func ->
    init_self()
    let result = warmup.stripQuotes(self.stripQuotesExampleOne[0])
    assert( result === self.stripQuotesExampleOne[1], "strip_quotes")
addTest(test_stripQuotes)

let test_scramble = func ->
    init_self()
    let result = warmup.scramble(self.scrambleExampleOne[0]),
        statementOne = result !== self.scrambleExampleOne[0],
        statementTwo = arrays_equal(result.split("").sort(), self.scrambleExampleOne[0].split("").sort())
    assert(statementOne and statementTwo, "scramble")
addTest(test_scramble)

let test_powersOfTwo = func ->
    init_self()
    let result = []
    warmup.powersOfTwo(self.powersOfTwoExampleOne[0], func p -> result.push(p))
    assert(arrays_equal(result, self.powersOfTwoExampleOne[1]), "powersOfTwo")
addTest(test_powersOfTwo)

let test_prefixes = func ->
    init_self()
    let result = []
    warmup.prefixes(self.prefixesExampleOne[0], func p -> result.push(p))
    assert(arrays_equal(result, self.prefixesExampleOne[1]), "prefixes")
addTest(test_prefixes)

let test_interleave = func ->
    init_self()
    let data = self.interleaveExampleOne,
        result = warmup.interleave(data[0], data[1])
    assert(arrays_equal(result, data[2]), "interleave")
addTest(test_interleave)

let test_stutter = func ->
    init_self()
    let result = warmup.stutter(self.stutterExampleOne[0])
    assert(arrays_equal(result, self.stutterExampleOne[1]), "stutter")
addTest(test_stutter)

let test_lines = func ->
    exec(self.lineCmd, func error, stdout -> assert(stdout === "3\n", "lines"))
addTest(test_lines)

let test_wordcount = func ->
    exec(self.wordCmd, func error, stdout -> assert(stdout === self.wordEx1, "wordcount"))
addTest(test_wordcount)

let runTests = func ->
    log("Running ${tests.length} tests...")
    test() for test in tests

let checkTestResults = func ->
    if len(failedTests) === 0:
        log("All tests passed")
    else
        log("A total of ${failedTests.length} test(s) failed")
        log("The following tests failed:")
        log("\t${failure}") for failure in failedTests

runTests()