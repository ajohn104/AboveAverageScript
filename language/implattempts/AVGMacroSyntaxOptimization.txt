Program         ::= Stmt (Newline Stmt)* EOF
Block           ::= (Newline Stmt)*
Stmt            ::= DeclareStmt  
                 |  AssignStmt
                 |  NativeStmt
                 |  SwitchStmt
                 |  Loop
                 |  IfStmt
                 |  ConsumeStmt
                 |  ReturnStmt
                 |  ControlStmt
                 |  Exp

DeclareStmt     ::= 'let' (Id (',' Id)* '=' (ObjInd | ExpList)) | (SetEqual (',' Indent Newline SetEqual (',' Newline SetEqual)* Dedent ) )
AssignStmt      ::= (Exp17 (',' Exp17)* (ForIn | ForColon)* ) AssignOp (ObjInd | ExpList)) 
                 |  (SetAssign (',' Indent Newline SetAssign (',' Newline SetAssign)* Dedent ) )         // Highly debatable. Consider later on.
ConsumeStmt     ::= Exp? '<-' Exp17                             // Debatable. Consider later on.
ReturnStmt      ::= 'ret' Exp1?
ControlStmt     ::= 'stop' | 'skip'
SetAssign       ::= Exp17 AssignOp Exp1                         // Also highly debatable. Consider later on.
SetEqual        ::= Id '=' Exp1

IfStmt          ::= 'if' Exp1 ':' Indent Block Dedent (Newline 'elif' Exp1 ':' Indent Block Dedent)* (Newline 'else' Indent Block Dedent)?
SwitchStmt      ::= 'switch' Exp1 ':' Indent Case+ Defaults? Dedent
Case            ::= Newline 'case' Exp18 ':' Indent Block Dedent
Defaults        ::= Newline 'default' ':' Indent Block Dedent
NativeStmt      ::= '***native***'

Loop            ::= WhileLoop | ForLoop
WhileLoop       ::= DoWhile | While
DoWhile         ::= 'do' Indent Block Dedent Newline 'while' Exp1
While           ::= 'while' Exp1 ':' Indent Block Dedent
ForLoop         ::= (ForIn | ForColon | For) ':' Indent Block Dedent
ForIn           ::= 'for' Id (',' Id)? 'in' Exp17
ForColon        ::= 'for' Id ':' Exp17
For             ::= 'for' ( ('let'? Id '=')? Exp1 ',')? Exp1 ',' Exp1

Exp             ::= Exp1 (ForIn | ForColon)*
Exp1            ::= Exp2 ('if' Exp2 ('else' Exp2)?)?
Exp2            ::= Exp3 ('in' Exp3)*
Exp3            ::= Exp4 ('?' Exp4 ':' Exp4)?
Exp4            ::= Exp5 ('or' Exp5)*
Exp5            ::= Exp6 ('and' Exp6)*
Exp6            ::= Exp7 ('|' Exp7)*
Exp7            ::= Exp8 ('^' Exp8)*
Exp8            ::= Exp9 ('&' Exp9)*
Exp9            ::= Exp10 (EqualOp Exp10)*
Exp10           ::= Exp11 (CompareOp Exp11)*
Exp11           ::= Exp12 (ShiftOp Exp12)*
Exp12           ::= Exp13 (AddOp Exp13)*
Exp13           ::= Exp14 (MulOp Exp14)*
Exp14           ::= PrefixOp? Exp15
Exp15           ::= Exp16 PostfixOp?
Exp16           ::= ('new' Exp17 Call) | Exp17
Exp17           ::= Exp18 (ArrayCont | Call | '.' Exp18)*
Exp18           ::= Id | BoolLit | IntLit | StringLit | '(' Exp2 Newline? ')' | Func | ArrayLit | ObjectInline | This | RegExpLit
// Exp18's parenthesized expr is more than likely going to cause an issue with indents. Seriously.

ArrayLit        ::= ('[' ']') | ArrayCont
ArrayCont       ::= '[' (Exp (',' Exp)*) | (Indent Newline Exp (',' Newline? Exp)* Dedent Newline) Newline? ']'
ExpList         ::= Exp1 (Newline? ',' Exp1)*
RegExpLit       ::= '\/[^\/\\]+(?:\\.[^\/\\]*)*\/[igm]{0,3}'
Func            ::= 'func' (Id (',' Id)* )? '->' ('ret'? Exp1) | (Indent Block Dedent)
ObjectInline    ::= '{' (Property (',' Property)*) | (Indent Newline Property (',' Newline Property)* Dedent Newline) '}'
ObjInd          ::= Indent (Newline (Prop|PropInd) )+ Dedent
Prop            ::= (Id | BoolLit | StringLit) ':' Exp1
PropInd         ::= (Id | BoolLit | StringLit) ':' (Exp1 | ObjInd)
Call            ::= '(' ( ExpList (Newline? ',' Indent Newline Exp1 (Newline ',' Exp1)* Dedent)? Newline?)? ')'

AssignOp        ::= '=' | '+=' |'-=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|='
EqualOp         ::= '!==' | '===' | '!=' | '=='
CompareOp       ::= '>=' | '>' | '<=' | '<'
ShiftOp         ::= '>>>' | '>>' | '<<'
AddOp           ::= '+' | '-'
MulOp           ::= '%' | '/' | '*'
PrefixOp        ::= '--' | '++' | '-' | '+' | '~' | 'not'
PostfixOp       ::= '--' | '++'

IntLit          ::= '[+-]?((0x[a-fA-F0-9]+)|(\d+(\.\d+)?([eE][+-]?\d+)?))'
StringLit       ::= '\"[^\"\\]*(?:\\.[^\"\\]*)*\"|\'[^\'\\]*(?:\\.[^\'\\]*)*\''
Id              ::= '[_$a-zA-Z][$\w]*(?=[^$\w]|$)'
This            ::= '_'
Newline         ::= '\n'
Indent          ::= '\i'
Dedent          ::= '\d'
EOF             ::= '@EOF'

