Program         ::= Stmt Block EOF
Block           ::= (Newline Stmt)*
Stmt            ::= DeclareStmt  
                 |  AssignStmt
                 |  NativeStmt
                 |  SwitchStmt
                 |  Loop
                 |  IfStmt
                 |  ConsumeStmt
                 |  ReturnStmt
                 |  ControlStmt
                 |  Exp

DeclareStmt     ::= 'let' (ExpList '=' (ObjInd | ExpList)) | (SetEqual (',' Indent Newline SetEqual (',' Newline SetEqual)* Dedent ) )
AssignStmt      ::= (ExpList AssignOp (ObjInd | ExpList)) | (SetAssign (',' Indent Newline SetAssign (',' Newline SetAssign)* Dedent ) )
ConsumeStmt     ::= (Exp (',' Exp)*)? '<-' Id (('.' Id)* ArrayCont+ Call?)+
ReturnStmt      ::= 'ret' Exp?
ControlStmt     ::= 'stop' | 'skip'
SetAssign       ::= Exp AssignOp Exp
SetEqual        ::= Exp '=' Exp

IfStmt          ::= 'if' Exp ':' Indent Block Dedent (Newline 'elif' Exp ':' Indent Block Dedent)* (Newline 'else' Indent Block Dedent)?
SwitchStmt      ::= 'switch' Exp ':' Indent Case+ Defaults? Dedent
Case            ::= Newline 'case' Exp18 ':' Indent Block Dedent
Defaults        ::= Newline 'default' ':' Indent Block Dedent
NativeStmt      ::= '***native***'

Loop            ::= WhileLoop | ForLoop
WhileLoop       ::= DoWhile | While
DoWhile         ::= 'do' Indent Block Dedent Newline 'while' Exp
While           ::= 'while' Exp ':' Indent Block Dedent
ForLoop         ::= (ForIn | ForColon | For) ':' Indent Block Dedent
ForIn           ::= 'for' Id (',' Id)? 'in' Exp
ForColon        ::= 'for' Id ':' Exp
For             ::= 'for' ( ('let'? Id '=')? Exp ',')? Exp ',' Exp

Exp             ::= Exp1 (ForIn | ForColon)*
Exp1            ::= Exp2 ('if' Exp2 ('else' Exp2)?)?
Exp2            ::= Exp3 ('?' Exp3 ':' Exp3)?
Exp3            ::= Exp4 ('or' Exp4)*
Exp4            ::= Exp5 ('and' Exp5)*
Exp5            ::= Exp6 ('|' Exp6)*
Exp6            ::= Exp7 ('^' Exp7)*
Exp7            ::= Exp8 ('&' Exp8)*
Exp8            ::= Exp9 (EqualOp Exp9)*
Exp9            ::= Exp10 (CompareOp Exp10)*
Exp10           ::= Exp11 (ShiftOp Exp11)*
Exp11           ::= Exp12 (AddOp Exp12)*
Exp12           ::= Exp13 (MulOp Exp13)*
Exp13           ::= PrefixOp? Exp14
Exp14           ::= Exp15 PostfixOp?
Exp15           ::= 'new'? Exp16 Call?
Exp16           ::= Exp17 Call? (ArrayCont Call?)* ( ('.' Exp16)* | (Indent (Newline '.' Exp16)+ Dedent)) )?
Exp17           ::= Exp18
Exp18           ::= Id | BoolLit | IntLit | StringLit | '(' Exp Newline? ')' | Func | ArrayLit | ObjectInline | This | RegExpLit

ArrayLit        ::= ('[' ']') | ArrayCont
ArrayCont       ::= '[' (Exp (',' Exp)*) | (Indent Newline Exp (',' Newline? Exp)* Dedent Newline) ']'
ExpList         ::= Exp (',' Exp)*
RegExpLit       ::= '\/[^\/\\]+(?:\\.[^\/\\]*)*\/[igm]{0,3}'
Func            ::= 'func' (Id (',' Id)* )? '->' ('ret'? Exp) | (Indent Block Dedent)
ObjectInline    ::= '{' (Property (',' Property)*) | (Indent Newline Property (',' Newline Property)* Dedent Newline) '}'
ObjInd          ::= Indent (Newline (Prop|PropInd) )+ Dedent
Prop            ::= (Id | BoolLit | StringLit) ':' Exp
PropInd         ::= (Id | BoolLit | StringLit) ':' (Exp | ObjInd)
Call            ::= '(' ( ExpList (',' Indent Newline Exp (Newline ',' Exp)* Dedent)? Newline?)? ')'

AssignOp        ::= '=' | '+=' |'-=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|='
EqualOp         ::= '!==' | '===' | '!=' | '=='
CompareOp       ::= '>=' | '>' | '<=' | '<'
ShiftOp         ::= '>>>' | '>>' | '<<'
AddOp           ::= '+' | '-'
MulOp           ::= '%' | '/' | '*'
PrefixOp        ::= '--' | '++' | '-' | '+' | '~' | 'not'
PostfixOp       ::= '--' | '++'

IntLit          ::= '[+-]?((0x[a-fA-F0-9]+)|(\d+(\.\d+)?([eE][+-]?\d+)?))'
StringLit       ::= '\"[^\"\\]*(?:\\.[^\"\\]*)*\"|\'[^\'\\]*(?:\\.[^\'\\]*)*\''
Id              ::= '[_$a-zA-Z][$\w]*(?=[^$\w]|$)'
This            ::= '_'
Newline         ::= '\n'
Indent          ::= '\i'
Dedent          ::= '\d'
EOF             ::= '@EOF'